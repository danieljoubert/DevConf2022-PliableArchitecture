<unity>
	<namespace name="Demo" />
	<assembly name="Demo" />
	<sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Unity.Interception.Configuration" />
	<sectionExtension type="WorkerThreadExtension" />
	<sectionExtension type="UnityConfig.ContainerDictionaryExtension" />

	<containers>
		<container>
			<extension type="Interception" />
			<type type="PerformanceBehavior">
				<property name="CounterCategory" value="Demo" />
			</type>
			<type type="IDataContext" mapTo="FastDataContext" name="FastDataContext">
				<constructor>
					<param name="connectionStringName" value="Demo" />
				</constructor>
				<property name="CommandTimeout" value="300" />
				<interceptor type="InterfaceInterceptor" />
				<interceptionBehavior type="TraceBehavior" />
				<interceptionBehavior type="PerformanceBehavior" />
			</type>
			<type type="ICache" mapTo="Cache" name="Cache">
				<property name="CacheDuration" value="00:00:20" />
			</type>
			<workerThread type="Demo.ICache" dependencyName="Cache" method="RemoveExpiredValues" Wait="00:00:10" />

    	<type type="IDataContext" mapTo="DataContextWithCache" name="DataContextWithCache">
				<constructor>
					<param name="dataContext" dependencyName="FastDataContext" />
					<param name="cache" dependencyName="Cache" />
				</constructor>
			</type>

	<type type="IQueueReader" mapTo="MsmqQueueReader" name="MsmqQueueReader">
				<constructor>
					<param name="queuePath" value=".\private$\demo.in" />
					<param name="task" dependencyName="deserializer" />
				</constructor>
				<property name="ReceiveTimeout" value="00:00:20" />
			</type>
			<type type="IProcess`1[[string]]" mapTo="ProcessLink`2[[string], [UnitLocationProtocol]]" name="deserializer" >
				<constructor>
					<param name="task" dependencyType="JsonDeserializerTask`1[[UnitLocationProtocol]]" />
					<!--<param name="task" dependencyType="XmlDeserializerTask`1[[UnitLocationProtocol]]" />-->
					<param name="nextProcess" dependencyName="Convert2Common" />
				</constructor>
				<interceptor type="InterfaceInterceptor" />
				<interceptionBehavior type="TraceBehavior" />
				<interceptionBehavior type="PerformanceBehavior" />
			</type>
			<type type="IConvert2Common" mapTo="DeviceTypeA2Common" name="DeviceTypeA" />
			<type type="IConvert2Common" mapTo="DeviceTypeA2Common" name="DeviceTypeB" />
			<type type="ITask`2[[UnitLocationProtocol], [Location]]" mapTo="Convert2Common" name="convert2Common">
				<constructor>
					<param name="converters">
						<containerDictionary/>
					</param>
				</constructor>
			</type>
			<type type="IProcess`1[[UnitLocationProtocol]]" mapTo="ProcessLink`2[[UnitLocationProtocol], [Location]]" name="Convert2Common">
				<constructor>
					<param name="task" dependencyName="convert2Common" />
					<param name="nextProcess" dependencyName="DataFilter" />
				</constructor>
			</type>
			<type type="ITask`2[[Location], [Location]]" mapTo="DataFilter" name="dataFilter">
				<constructor>
					<param name="dataContext" dependencyName="DataContextWithCache" />
				</constructor>
				<interceptor type="InterfaceInterceptor" />
				<interceptionBehavior type="TraceBehavior" />
				<interceptionBehavior type="PerformanceBehavior" />
			</type>
			<type type="IProcess`1[[Location]]" mapTo="ProcessLink`2[[Location], [Location]]" name="DataFilter">
				<constructor>
					<param name="task" dependencyName="dataFilter" />
					<param name="nextProcess" dependencyName="xmlSerializer" />
				</constructor>
			</type>
			<type type="IProcess`1[[Location]]" mapTo="ProcessLink`2[[Location], [string]]" name="xmlSerializer">
				<constructor>
					<param name="task" dependencyType="XmlSerializerTask`1[[Location]]" />
					<param name="nextProcess" dependencyName="queueWriter" />
				</constructor>
			</type>
			<type type="IProcess`1[[string]]" mapTo="MsmqQueueWriter" name="queueWriter">
				<constructor>
					<param name="queuePath" value=".\private$\demo.out" />
				</constructor>
			</type>
			<workerThread type="Demo.IQueueReader" dependencyName="MsmqQueueReader" method="Dequeue" />
		</container>
	</containers>
</unity>
